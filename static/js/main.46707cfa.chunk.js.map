{"version":3,"sources":["PlottingPanel.js","Coin.js","CoinPanel.js","InputPanel.js","TablePanel.js","CoinFlippingSim.js","App.js","reportWebVitals.js","index.js"],"names":["PlottingPanel","alpha","this","props","beta","x","Array","from","length","v","i","y","className","data","type","mode","layout","width","height","title","xaxis","text","fixedrange","yaxis","Component","Coin","face","class","CoinPanel","InputPanel","state","realProb","handleChange","bind","e","preventDefault","setState","target","name","value","st","parseInt","updateParameters","Form","Group","Label","htmlFor","Control","id","disabled","isFlipping","onChange","TablePanel","Table","striped","bordered","hover","size","map","r","number","result","sequence","join","knowledge","CoinFlippingSim","table","handleFlipButton","handleResetButton","parameters","newFace","Math","random","newSequence","newAlpha","newBeta","newKnowledge","Container","fluid","Row","Col","reset","ButtonToolbar","Button","onClick","variant","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46707cfa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\n\nclass PlottingPanel extends Component {\n\n    render() {\n\n        let alpha = this.props.alpha;\n        let beta = this.props.beta;\n        let x = Array.from({length: 201}, (v, i) => i/200);\n        let y = Array.from(x, x => (x ** alpha) * ((1 - x) ** beta));\n\n        return (  \n            <Plot\n            className=\"PlottingPanel-Plot\"\n            data={[\n                {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'markers',\n                    \n                }\n            ]}\n            layout={\n                {\n                    width: 800,\n                    height: 500,\n                    title: 'The probability distribution of w',\n                    xaxis: {\n                        title: {\n                            text: 'w',\n                        },\n                        fixedrange: true,\n                    },\n                    yaxis: {\n                        title: {\n                            text: 'p(w)',\n                        },\n                        fixedrange: true,\n                    }\n                }\n            \n            }\n            />\n        );\n    }\n}\n\nexport default PlottingPanel;","import React, { Component } from 'react';\nimport './Coin.css'\n\nclass Coin extends Component {\n\n    render() {\n\n        let face = this.props.face;\n\n        return (\n\n            <div>\n                <i class={`Coin fas fa-circle ${face}`}></i>\n            </div>\n        );\n    }\n}\n\nexport default Coin;","import React, { Component } from 'react';\nimport Coin from './Coin';\nimport './CoinPanel.css';\n\nclass CoinPanel extends Component {\n\n    render() {\n\n        let face = this.props.face;\n\n        return (\n            <div className=\"CoinPanel\">\n                <div className=\"CoinPanel-Description\">\n                    Blue is for the head, pink is for the tail\n                </div>\n                <Coin className=\"CoinPanel-Coin\" face={ face } />\n            </div>\n        );\n    }\n}\n\nexport default CoinPanel;","import React, { Component } from 'react';\nimport { Form, } from 'react-bootstrap';\nimport './InputPanel.css';\n\nclass InputPanel extends Component {\n\n    constructor(props) {\n\n        super(props);\n        \n        this.state = {\n            realProb: this.props.realProb,\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n\n        e.preventDefault();\n\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n\n        this.setState(st => {\n            return {\n                alpha: st.alpha.length > 0 ? parseInt(st.alpha) : st.alpha,\n                beta: st.beta.length > 0 ? parseInt(st.beta) : st.beta,\n            };\n        })\n\n        this.setState(st => {\n            this.props.updateParameters(st);\n        });\n    }\n\n    render() {\n\n        return (\n            <Form className=\"InputPanel\">\n                <Form.Group>\n                    <Form.Label htmlFor=\"realProb\">Real probability</Form.Label>\n                    <Form.Control\n                        id=\"realProb\"\n                        name=\"realProb\"\n                        value={ this.props.realProb }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor=\"alpha\">Alpha</Form.Label>\n                    <Form.Control\n                        id=\"alpha\"\n                        name=\"alpha\"\n                        value={ this.props.alpha }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>Beta</Form.Label>\n                    <Form.Control\n                        id=\"beta\"\n                        name=\"beta\"\n                        value={ this.props.beta }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n\nexport default InputPanel;","import React, { Component } from 'react';\nimport { Table, } from 'react-bootstrap';\nimport './TablePanel.css';\n\nclass TablePanel extends Component {\n\n    render() {\n        return (\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th className=\"number\">#</th>\n                        <th className=\"result\">Result</th>\n                        <th className=\"sequence\">Sequence</th>\n                        <th className=\"knowledge\">Knowledge</th>\n                    </tr>\n                </thead>\n\n                <tbody>   \n                    { this.props.data.map(r => <tr className=\"record\">\n                        <td className=\"number\">\n                            { r.number }\n                        </td>\n                        <td className=\"result\">\n                            { r.result }\n                        </td>\n                        <td className=\"sequence\">\n                            { r.sequence.length > 0 ? `[${r.sequence.join(', ')}]` : '-' }\n                        </td>\n                        <td className=\"knowledge\">\n                            { r.knowledge }\n                        </td>\n                    </tr>) }\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default TablePanel;","import React, { Component } from 'react';\nimport { Container, Row, Col, Button, ButtonToolbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PlottingPanel from './PlottingPanel';\nimport CoinPanel from './CoinPanel';\nimport InputPanel from './InputPanel';\nimport TablePanel from './TablePanel';\n\nclass CoinFlippingSim extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isFlipping: false,\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n            face: this.props.face,\n            realProb: this.props.realProb,\n            knowledge: this.props.alpha / (this.props.alpha + this.props.beta),\n            sequence: this.props.sequence,\n            table: this.props.table,\n        }\n\n        this.updateParameters = this.updateParameters.bind(this);\n\n        this.handleFlipButton = this.handleFlipButton.bind(this);\n        this.handleResetButton = this.handleResetButton.bind(this);\n    }\n\n    static defaultProps = {\n        alpha: 2,\n        beta: 2,\n        face: 'H',\n        realProb: 0.5,\n        knowledge: 0.5,\n        sequence: [],\n        table: [{\n            number: 0,\n            result: '-',\n            sequence: [],\n            knowledge: 0.5,\n        },],\n    }\n\n    updateParameters(parameters) {\n        this.setState(parameters);\n\n        this.setState(st => {\n            return {\n                knowledge: st.alpha / (st.alpha + st.beta),\n                table: [{\n                    number: 0,\n                    result: '-',\n                    sequence: this.props.sequence,\n                    knowledge: st.alpha / (st.alpha + st.beta),\n                },]\n            };\n        })\n    }\n\n    handleFlipButton(e) {\n        let randomNumber = Math.random();\n        let newFace = randomNumber <= this.state.realProb ? 'H' : 'T';\n        \n        this.setState(st => {\n            let newSequence = [...st.sequence, newFace]\n            let newAlpha = st.alpha + (newFace === 'H' ? 1 : 0);\n            let newBeta = st.beta + (newFace === 'H' ? 0 : 1);\n            let newKnowledge = newAlpha / (newAlpha + newBeta);\n            return {\n                face: newFace,\n                isFlipping: true,\n                sequence: newSequence,\n                alpha: newAlpha,\n                beta: newBeta, \n                knowledge:newKnowledge,\n                table: [...st.table, {\n                    number: st.table.length,\n                    result: newFace,\n                    sequence: newSequence,\n                    knowledge: newKnowledge,\n                }]\n            };\n        })\n    } \n\n    handleResetButton(e) {\n        this.setState({\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n            face: this.props.face,\n            isFlipping: false,\n            realProb: this.props.realProb,\n            sequence: this.props.sequence,\n            table: this.props.table,\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"CoinFlippingSim\">\n                <Row>\n                    <Col className=\"CoinFlippingSim-CoinPanel\">\n                        <CoinPanel face={ this.state.face }/>\n                    </Col>\n\n                    <Col>\n                        <Row className=\"CoinFlippingSim-InputPanel\">\n                            <InputPanel\n                                alpha={ this.state.alpha }\n                                beta={ this.state.beta }\n                                realProb={ this.state.realProb }\n                                updateParameters={ this.updateParameters }\n                                isFlipping={ this.state.isFlipping }\n                                reset={ this.handleResetButton }\n                            />\n                        </Row>\n                        \n                        <Row className=\"CoinFlippingSim-ButtonPanel\">\n                            <ButtonToolbar className=\"CoinFlippingSim-ButtonPanel\">\n                                <Button\n                                    onClick={ this.handleFlipButton }\n                                    size=\"lg\"\n                                    variant=\"primary\">\n                                    Flip!\n                                </Button>{' '}\n\n                                <Button\n                                    onClick={ this.handleResetButton }\n                                    size=\"lg\"\n                                    variant=\"danger\">\n                                    Reset\n                                </Button>{' '}\n                            </ButtonToolbar>\n                        </Row>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col className=\"CoinFlippingSim-PlottingPanel\">\n                        <PlottingPanel alpha={ this.state.alpha } beta={ this.state.beta } />\n                    </Col>\n\n                    <Col className=\"CoinFlippingSim-TablePanel\">\n                        <TablePanel data={ this.state.table }/>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default CoinFlippingSim;","import './App.css';\nimport CoinFlippingSim from './CoinFlippingSim';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinFlippingSim />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}