{"version":3,"sources":["PlottingPanel.js","coin-head.png","coin-tail.png","Coin.js","CoinPanel.js","InputPanel.js","TablePanel.js","CoinFlippingSim.js","App.js","reportWebVitals.js","index.js"],"names":["PlottingPanel","alpha","this","props","beta","x","Array","from","length","v","i","y","className","data","type","mode","layout","autosize","title","xaxis","text","fixedrange","yaxis","paper_bgcolor","plot_bgcolor","margin","l","t","r","b","useResizeHandler","style","width","height","Component","Coin","face","src","head","tail","alt","CoinPanel","InputPanel","state","realProb","handleChange","bind","e","preventDefault","setState","target","name","value","st","parseInt","updateParameters","Form","Group","Label","htmlFor","Control","id","disabled","isFlipping","onChange","TablePanel","map","number","result","sequence","join","knowledge","toFixed","CoinFlippingSim","table","handleFlipButton","handleResetButton","parameters","newFace","Math","random","newSequence","newAlpha","newBeta","newKnowledge","reset","onClick","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57c675a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\n\nclass PlottingPanel extends Component {\n\n    render() {\n\n        let alpha = this.props.alpha;\n        let beta = this.props.beta;\n        let x = Array.from({length: 201}, (v, i) => i/200);\n        let y = Array.from(x, x => (x ** alpha) * ((1 - x) ** beta));\n\n        return (  \n            <Plot\n            className=\"PlottingPanel-Plot\"\n            data={[\n                {\n                    x: x,\n                    y: y,\n                    type: 'scatter',\n                    mode: 'markers',\n                    \n                }\n            ]}\n            layout={\n                {\n                    autosize: true,\n                    title: 'The probability distribution of w',\n                    xaxis: {\n                        title: {\n                            text: 'w',\n                        },\n                        fixedrange: true,\n                    },\n                    yaxis: {\n                        title: {\n                            text: 'p(w)',\n                        },\n                        fixedrange: true,\n                    },\n                    paper_bgcolor: 'beige',\n                    plot_bgcolor: 'beige',\n\n                    margin: {\n                        l: 60,\n                        t: 30,\n                        r: 20,\n                        b: 25,\n                    }\n                }\n            }\n            useResizeHandler={true}\n            style={{width: \"100%\", height: \"100%\"}}\n            />\n        );\n    }\n}\n\nexport default PlottingPanel;","export default __webpack_public_path__ + \"static/media/coin-head.0c683bac.png\";","export default __webpack_public_path__ + \"static/media/coin-tail.51007e01.png\";","import React, { Component } from 'react';\nimport './Coin.css';\nimport head from './coin-head.png';\nimport tail from './coin-tail.png';\n\nclass Coin extends Component {\n\n    render() {\n\n        let face = this.props.face;\n\n        return (\n\n            <div>\n                <img\n                    src={ face === 'H' ? head : tail }\n                    alt={ face === 'H' ? 'Head of coin' : 'Tail of coin' }\n                    className=\"coin-image\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default Coin;","import React, { Component } from 'react';\nimport Coin from './Coin';\nimport './CoinPanel.css';\n\nclass CoinPanel extends Component {\n\n    render() {\n\n        let face = this.props.face;\n\n        return (\n            <div className=\"CoinPanel\">\n                <Coin className=\"CoinPanel-Coin\" face={ face } />\n            </div>\n        );\n    }\n}\n\nexport default CoinPanel;","import React, { Component } from 'react';\nimport { Form, } from 'react-bootstrap';\nimport './InputPanel.css';\n\nclass InputPanel extends Component {\n\n    constructor(props) {\n\n        super(props);\n        \n        this.state = {\n            realProb: this.props.realProb,\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n\n        e.preventDefault();\n\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n\n        this.setState(st => {\n            return {\n                alpha: st.alpha.length > 0 ? parseInt(st.alpha) : st.alpha,\n                beta: st.beta.length > 0 ? parseInt(st.beta) : st.beta,\n            };\n        })\n\n        this.setState(st => {\n            this.props.updateParameters(st);\n        });\n    }\n\n    render() {\n\n        return (\n            <Form className=\"InputPanel\">\n                <Form.Group>\n                    <Form.Label htmlFor=\"realProb\">Real probability</Form.Label>\n                    <Form.Control\n                        id=\"realProb\"\n                        name=\"realProb\"\n                        value={ this.props.realProb }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor=\"alpha\">Alpha</Form.Label>\n                    <Form.Control\n                        id=\"alpha\"\n                        name=\"alpha\"\n                        value={ this.props.alpha }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>Beta</Form.Label>\n                    <Form.Control\n                        id=\"beta\"\n                        name=\"beta\"\n                        value={ this.props.beta }\n                        disabled={ this.props.isFlipping }\n                        onChange={ this.handleChange }\n                    />\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n\nexport default InputPanel;","import React, { Component } from 'react';\nimport './TablePanel.css';\n\nclass TablePanel extends Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th className=\"number\">#</th>\n                        <th className=\"result\">Result</th>\n                        <th className=\"sequence\">Sequence</th>\n                        <th className=\"knowledge\">Knowledge</th>\n                    </tr>\n                </thead>\n\n                <tbody>   \n                    { this.props.data.map(r => <tr className=\"record\" key={ r.number }>\n                        <td className=\"number\">\n                            { r.number }\n                        </td>\n                        <td className=\"result\">\n                            { r.result }\n                        </td>\n                        <td className=\"sequence\">\n                            { `[${r.sequence.join(', ')}]` }\n                        </td>\n                        <td className=\"knowledge\">\n                            { r.knowledge.toFixed(6) }\n                        </td>\n                    </tr>) }\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default TablePanel;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PlottingPanel from './PlottingPanel';\nimport CoinPanel from './CoinPanel';\nimport InputPanel from './InputPanel';\nimport TablePanel from './TablePanel';\nimport './CoinFlippingSim.css';\n\nclass CoinFlippingSim extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isFlipping: false,\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n            face: this.props.face,\n            realProb: this.props.realProb,\n            knowledge: this.props.alpha / (this.props.alpha + this.props.beta),\n            sequence: this.props.sequence,\n            table: this.props.table,\n        }\n\n        this.updateParameters = this.updateParameters.bind(this);\n\n        this.handleFlipButton = this.handleFlipButton.bind(this);\n        this.handleResetButton = this.handleResetButton.bind(this);\n    }\n\n    static defaultProps = {\n        alpha: 2,\n        beta: 2,\n        face: 'H',\n        realProb: 0.5,\n        knowledge: 0.5,\n        sequence: [],\n        table: [{\n            number: 0,\n            result: '-',\n            sequence: [],\n            knowledge: 0.5,\n        },],\n    }\n\n    updateParameters(parameters) {\n        this.setState(parameters);\n\n        this.setState(st => {\n            return {\n                knowledge: st.alpha / (st.alpha + st.beta),\n                table: [{\n                    number: 0,\n                    result: '-',\n                    sequence: this.props.sequence,\n                    knowledge: st.alpha / (st.alpha + st.beta),\n                },]\n            };\n        })\n    }\n\n    handleFlipButton(e) {\n        let randomNumber = Math.random();\n        let newFace = randomNumber <= this.state.realProb ? 'H' : 'T';\n        \n        this.setState(st => {\n            let newSequence = [...st.sequence, newFace]\n            let newAlpha = st.alpha + (newFace === 'H' ? 1 : 0);\n            let newBeta = st.beta + (newFace === 'H' ? 0 : 1);\n            let newKnowledge = newAlpha / (newAlpha + newBeta);\n            return {\n                face: newFace,\n                isFlipping: true,\n                sequence: newSequence,\n                alpha: newAlpha,\n                beta: newBeta, \n                knowledge:newKnowledge,\n                table: [...st.table, {\n                    number: st.table.length,\n                    result: newFace,\n                    sequence: newSequence,\n                    knowledge: newKnowledge,\n                }]\n            };\n        })\n    } \n\n    handleResetButton(e) {\n        this.setState({\n            alpha: this.props.alpha,\n            beta: this.props.beta,\n            face: this.props.face,\n            isFlipping: false,\n            realProb: this.props.realProb,\n            sequence: this.props.sequence,\n            table: this.props.table,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"CoinFlippingSim\">\n                <div className=\"row\" id=\"upper-row\">\n                    <div className=\"panel\" id=\"CoinFlippingSim-CoinPanel\">\n                        <CoinPanel face={ this.state.face }/>\n                    </div>\n\n                    <div className=\"panel\" id=\"CoinFlippingSim-ControlPanel\">\n                        <div id=\"CoinFlippingSim-InputPanel\">\n                            <InputPanel\n                                alpha={ this.state.alpha }\n                                beta={ this.state.beta }\n                                realProb={ this.state.realProb }\n                                updateParameters={ this.updateParameters }\n                                isFlipping={ this.state.isFlipping }\n                                reset={ this.handleResetButton }\n                            />\n                        </div>\n                        \n                        <div id=\"CoinFlippingSim-ButtonPanel\">  \n                            <button\n                                onClick={ this.handleFlipButton }\n                                id=\"flip-button\">\n                                Flip!\n                            </button>\n\n                            <button\n                                onClick={ this.handleResetButton }\n                                id=\"reset-button\">\n                                Reset\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row\" id=\"lower-row\">\n                    <div className=\"panel\" id=\"CoinFlippingSim-PlottingPanel\">\n                        <PlottingPanel alpha={ this.state.alpha } beta={ this.state.beta } />\n                    </div>\n\n                    <div className=\"panel\" id=\"CoinFlippingSim-TablePanel\">\n                        <TablePanel data={ this.state.table }/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CoinFlippingSim;","import './App.css';\nimport CoinFlippingSim from './CoinFlippingSim';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinFlippingSim />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}